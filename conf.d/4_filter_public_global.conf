filter {

  ## Copy, edit and uncomment the following if you want to have deterministic IDs:
  # # if ![@metadata][_id] and ("e2e-tests" in [#source] or [@metadata][test_mode]) {
  # if ![@metadata][_id] {
  #   ## https://www.elastic.co/blog/logstash-lessons-handling-duplicates
  #   ## This needs to be done as early as possible against the raw event to allow
  #   ## changes to the post-processing without altering the ID.
  #   ## SHA2 is choosen because it is considered cryptographically secure (other than SHA1 which is broken).
  #   ## This is also important because otherwise, someone who could potentially
  #   ## do a second-preimage attack on MD5 to overwrite/change any log in ES that
  #   ## she does not like and of which she has the original version (log line).
  #   ## SHA512 is chosen over SHA256 because SHA512 is considered faster on modern CPUs.
  #   ## MD5 was considered because it is slightly faster according to `openssl speed md5 sha512`.
  #   ## When checking the CPU load without fingerprinting and with
  #   ## fingerprinting (SHA512 or MD5) no real impact is noticed.
  #   ## This test was done once before with an CPU load impact from 15 % (base
  #   ## line) to 25 % (with fingerprinting) but this test is considered wrong now.
  #   ## If the ID is already present in the input, use it. But in general, it is
  #   ## preferred to not store the ID in the archive and regenerate it.


  #   ## List all sources here which already ship with the correct [@timestamp] field.
  #   ## Meaning that [@timestamp] does not need to be extracted from the [message] field.
  #   ## This is important because we definitely want to include the timestamp in the hash.
  #   ## But if [@timestamp] is not contained in the original event, Logstash will add it at input time
  #   ## so it would be different on archive restore.

  #   ## FIXME: IDs are not deterministic when being calculated on different Logstash hosts.
  #   if [#source] in ["e2e-tests", "windows-eventlog", "wireless-eventlog-fastping", "curator"] {

  #     fingerprint {
  #       concatenate_all_fields => true
  #       ## Unix socket adds path. https://github.com/logstash-plugins/logstash-input-unix/issues/26
  #       exclude => [
  #         "#logstash_timestamp",

  #         "@version",
  #         "path",
  #         "port",
  #         "input_type",
  #         "type",
  #         "source"
  #       ]
  #       target => "[@metadata][_id]"
  #       method => "SHA512"
  #       ## The key of the HMAC can be used to proof the authenticity of the
  #       ## source fields as a side effect.
  #       ## Note that HMAC is an authentication code and not an "encryption" even though we have a "key" defined.
  #       key => "CHANGEME"
  #       base64encode => true
  #       # deep_sort => true
  #     }

  #   } else {

  #     fingerprint {
  #       concatenate_all_fields => true
  #       exclude => [
  #         "#logstash_timestamp",

  #         "@version",
  #         "path",
  #         "port",
  #         "input_type",
  #         "type",
  #         "source",

  #         "host",
  #         "@timestamp"
  #       ]
  #       target => "[@metadata][_id]"
  #       method => "SHA512"
  #       key => "CHANGEME"
  #       base64encode => true
  #       # deep_sort => true
  #     }

  #   }

  #   ## Truncate is done because authentication code is merely a side effect but
  #   ## can still be used, only with limited size.
  #   truncate {
  #     fields => ["[@metadata][_id]"]
  #     length_bytes => 23
  #   }
  # }


  ## Set [#logstash_timestamp] as early as possible to the timestamp when the
  ## event entered a logstash instance for the first time.
  ## If archived logs are re-digested, [#logstash_timestamp] will not be overwritten.
  if ![#logstash_timestamp] {
    # mutate {
    #   ## Comments are not allowed in ruby hash declaration.
    #
    #   ## Undefined [@timestamp] is known to be deadly for the logstash!
    #   ## Using `copy` for this seems to be deadly for the es logstash output.
    #   ## TODO: Retest.
    #   # copy => {
    #   #   "@timestamp" => "#logstash_timestamp"
    #   # }
    #   # -> "#logstash_timestamp" => "%{@timestamp}"
    #   add_field => {
    #     "#logstash_timestamp" => "%{@timestamp}"
    #   }
    # }

    ruby {
        code => "event.set('#logstash_timestamp', Time.now());"
    }
  }

  ## Copy this section as needed and change the if "". Unfortunately, no
  ## `string in list` check condition works here because in the worst case, both objects
  ## are lists (also the `string`):
  ## if "windows-eventlog" in [#source] {
  if [@metadata][#save_raw_event] {
    ## Clone events for later unparsed storage to files.
    clone {
      clones => ["raw_event"]
      add_field => {
        "[@metadata][#skip_ls_filter]" => true
      }
    }
  }

  ## Support for deprecated input.
  ## The issue is that @metadata is not written to the archive so the event
  ## would be handled differently when being reimported.
  ## Does not work for some reason:
  # mutate {
  #   rename => {
  #     "[@metadata][pre_filters]" => "#pre_filters"
  #   }
  # }

  if ![@metadata][#skip_ls_filter] {
    mutate {
      remove_field => [
        ## Ensure fields added by input plugins is absent.
        "path",
        "input_type",
        "type",
        "source",

        ## Added by *beat at emit time.
        "beat",

        ## The offset could be useful. https://github.com/logstash-plugins/logstash-input-file/issues/7
        "offset"
      ]

      # rename => {
      #   "offset"  => "#logfile_byte_offset"
      # }

    }

    ## [#logstash_host] is optional. It is useful for debugging.
    ## If it is not needed anymore, just comment out the following section.
    ruby {
      init => "require 'socket'"
      code => "event.set('#logstash_host', Socket.gethostname)"
    }

  }
}
